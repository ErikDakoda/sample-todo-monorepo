import "user"
import "space"

abstract model Base {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt()
    trashedAt   DateTime?
    ownerId     String   @deny('update', ownerId != auth().id)
    owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    spaceId     String?   @deny('update', ownerId == auth().id)
    space       Space?    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    private     Boolean   @default(false)
    publishedAt DateTime?

    // require login
    @@deny('all', auth() == null)

    // can be read by owner or space member (only if not private) 
    @@allow('read', (ownerId == auth().id || (space.members?[userId == auth().id] && !private)))

    // if published, can be read by every logged in user
    @@allow('read', auth() != null && publishedAt != null)

    // when created, owner must be set to current user, and user must be in the space
    @@allow('create', ownerId == auth().id && space.members?[userId == auth().id])

    // can be updated by the owner or space member
    @@allow('update', ownerId == auth().id || space.members?[userId == auth().id])

    // can be deleted by owner or space member
    @@allow('delete', ownerId == auth().id || space.members?[userId == auth().id])

    // exclude trashed records
    @@deny('read', trashedAt != null)

    // admins have full access
    @@allow('all', auth().role == ADMIN)

    @@index([ownerId])
    @@index([spaceId])
}